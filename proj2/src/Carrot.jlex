import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int lineNum, int chNum) {
        linenum = lineNum;
        charnum = chNum;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int lineNum, int chNum, int val) {
        super(lineNum, chNum);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int lineNum, int chNum, String val) {
        super(lineNum, chNum);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int lineNum, int chNum, String val) {
        super(lineNum, chNum);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

%%

DIGIT=        [0-9]
WHITESPACE=   [\040\t]
LETTER=       [a-zA-Z]

NEWLINE=      (\\n)
TAB=          (\\t)
SINGLEQ=      (\\')
DOUBLEQ=      (\\\")
QUESTION=     (\\\?)
BACKSLASH=    (\\\\)
QUOTE=        [\"]
ESCAPED=      ({NEWLINE})|({TAB})|({SINGLEQ})|({DOUBLEQ})|({QUESTION})|({BACKSLASH})
CHARACTER=    ({ESCAPED}|[^\n\\\"])
BADESCAPED=   (\\[^nt'\"\?\\\n])


%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%


"bool"    {
            // Regular expressions for all reserved words.
            Symbol S = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"int"     { Symbol S = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"void"    { Symbol S = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"true"    { Symbol S = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"false"   { Symbol S = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"struct"  { Symbol S = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 6;
            return S;
          }

"cin"     { Symbol S = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 3;
            return S;
          }

"cout"    { Symbol S = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"if"      { Symbol S = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"else"    { Symbol S = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 4;
            return S;
          }

"while"   { Symbol S = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 5;
            return S;
          }

"return"  { Symbol S = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 6;
            return S;
          }

({LETTER}|_)({LETTER}|{DIGIT}|_)*
{
    // Regular expression for identifier.
    Symbol S = new Symbol(sym.ID,
                     new IdTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return S;
}

{QUOTE}({CHARACTER})*{QUOTE} {
    // Regular expression for good string.
    Symbol S = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return S;
}

{QUOTE}({CHARACTER})*  {
                // Regular expression for unterminated string.
                ErrMsg.fatal(yyline+1, CharNum.num,
                                         "unterminated string literal ignored");
                CharNum.num = 1;
              }

{QUOTE}(({CHARACTER})*({BADESCAPED})+({CHARACTER})*)+{QUOTE}  {
                // Regular expression for string with bad escaped characters.
                ErrMsg.fatal(yyline+1, CharNum.num,
                                         "string literal with bad escaped character ignored");
                CharNum.num += yytext().length();
              }

{QUOTE}((({CHARACTER})*({BADESCAPED})+({CHARACTER})*)+) {
                // Regular expression for unterminated string with bad escaped characters.
                ErrMsg.fatal(yyline+1, CharNum.num,
                                         "unterminated string literal with bad escaped character ignored");
                CharNum.num = 1;
              }

{QUOTE}((({CHARACTER})*({BADESCAPED})+({CHARACTER})*)+\\) {
                // Also regular expression for unterminated string with bad escaped characters.
                // I split it because it is more clear and shorter.
                ErrMsg.fatal(yyline+1, CharNum.num,
                                         "unterminated string literal with bad escaped character ignored");
                CharNum.num = 1;
              }

{QUOTE}(({CHARACTER})*\\) {
                // Also regular expression for unterminated string with bad escaped characters.
                // I split it because it is more clear and shorter.
                ErrMsg.fatal(yyline+1, CharNum.num,
                                         "unterminated string literal with bad escaped character ignored");
                CharNum.num = 1;
              }

{DIGIT}+  { // NOTE: the following computation of the integer value does NOT
            //       check for overflow.  This must be changed.

            // Regular expression for integer literal (both good and overflowed).
            try {
                int val = (new Integer(yytext())).intValue();
                Symbol S = new Symbol(sym.INTLITERAL,
                                 new IntLitTokenVal(yyline+1, CharNum.num, val));
                CharNum.num += yytext().length();
                return S;
            } catch (NumberFormatException e) { // integer is too large.
                ErrMsg.warn(yyline+1, CharNum.num,
                                     "integer literal too large; using max value");
                int val = Integer.MAX_VALUE;
                Symbol S = new Symbol(sym.INTLITERAL,
                                new IntLitTokenVal(yyline+1, CharNum.num, val));
                CharNum.num += yytext().length();
                return S;
            }
           }

((\/\/\/)|(##))[^\n]* {
    // Regular expression for comments.
}

\n        { CharNum.num = 1; }

{WHITESPACE}+  { CharNum.num += yytext().length(); }

"+"       {
            // Regular expressions for all symbols.
            Symbol S = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"{"       { Symbol S = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"}"       { Symbol S = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"("       { Symbol S = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

")"       { Symbol S = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

";"       { Symbol S = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"."       { Symbol S = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

","       { Symbol S = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"<<"      { Symbol S = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

">>"      { Symbol S = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"++"      { Symbol S = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"--"      { Symbol S = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"-"       { Symbol S = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"*"       { Symbol S = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"/"       { Symbol S = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"!"       { Symbol S = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"&&"      { Symbol S = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"||"      { Symbol S = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"=="      { Symbol S = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"!="      { Symbol S = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"<"       { Symbol S = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

">"       { Symbol S = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

"<="       { Symbol S = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

">="      { Symbol S = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
            CharNum.num += 2;
            return S;
          }

"="       { Symbol S = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return S;
          }

.         {
            // Any other character/string will be treated as error.
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "ignoring illegal character: " + yytext());
            CharNum.num++;
          }
